using  System;
using  System.Collections.Generic;
using  System.Linq.Expressions;
using  System.Web;
using  Umbraco.Core.Models;
using  Umbraco.Core.Models.PublishedContent;
using  Umbraco.Web;
using  Umbraco.ModelsBuilder;
using  Umbraco.ModelsBuilder.Umbraco;
[assembly: PureLiveAssembly]
[assembly:ModelsBuilderAssembly(PureLive = true, SourceHash = "74e80b97c55aaf09")]
[assembly:System.Reflection.AssemblyVersion("0.0.0.1")]


// FILE: models.generated.cs

//------------------------------------------------------------------------------
// <auto-generated>
//   This code was generated by a tool.
//
//    Umbraco.ModelsBuilder v3.0.7.99
//
//   Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------















namespace Umbraco.Web.PublishedContentModels
{
	// Mixin content Type 1091 with alias "contentBase"
	/// <summary>Content Base</summary>
	public partial interface IContentBase : IPublishedContent
	{
		/// <summary>Content</summary>
		Newtonsoft.Json.Linq.JToken BodyText { get; }

		/// <summary>Page Title</summary>
		string PageTitle { get; }
	}

	/// <summary>Content Base</summary>
	[PublishedContentModel("contentBase")]
	public partial class ContentBase : PublishedContentModel, IContentBase
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "contentBase";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public ContentBase(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<ContentBase, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Content
		///</summary>
		[ImplementPropertyType("bodyText")]
		public Newtonsoft.Json.Linq.JToken BodyText
		{
			get { return GetBodyText(this); }
		}

		/// <summary>Static getter for Content</summary>
		public static Newtonsoft.Json.Linq.JToken GetBodyText(IContentBase that) { return that.GetPropertyValue<Newtonsoft.Json.Linq.JToken>("bodyText"); }

		///<summary>
		/// Page Title: The title of the page, this is also the first text in a google search result. The ideal length is between 40 and 60 characters
		///</summary>
		[ImplementPropertyType("pageTitle")]
		public string PageTitle
		{
			get { return GetPageTitle(this); }
		}

		/// <summary>Static getter for Page Title</summary>
		public static string GetPageTitle(IContentBase that) { return that.GetPropertyValue<string>("pageTitle"); }
	}

	// Mixin content Type 1092 with alias "feature"
	/// <summary>Feature</summary>
	public partial interface IFeature : IPublishedContent
	{
		/// <summary>Details</summary>
		string FeatureDetails { get; }

		/// <summary>Name</summary>
		string FeatureName { get; }
	}

	/// <summary>Feature</summary>
	[PublishedContentModel("feature")]
	public partial class Feature : PublishedContentModel, IFeature
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "feature";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Feature(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Feature, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Details
		///</summary>
		[ImplementPropertyType("featureDetails")]
		public string FeatureDetails
		{
			get { return GetFeatureDetails(this); }
		}

		/// <summary>Static getter for Details</summary>
		public static string GetFeatureDetails(IFeature that) { return that.GetPropertyValue<string>("featureDetails"); }

		///<summary>
		/// Name
		///</summary>
		[ImplementPropertyType("featureName")]
		public string FeatureName
		{
			get { return GetFeatureName(this); }
		}

		/// <summary>Static getter for Name</summary>
		public static string GetFeatureName(IFeature that) { return that.GetPropertyValue<string>("featureName"); }
	}

	/// <summary>Home</summary>
	[PublishedContentModel("home")]
	public partial class Home : PublishedContentModel, ISEO
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "home";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Home(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Home, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Color Theme: This will be a custom property editor later
		///</summary>
		[ImplementPropertyType("colorTheme")]
		public int ColorTheme
		{
			get { return this.GetPropertyValue<int>("colorTheme"); }
		}

		///<summary>
		/// Font: This will be a custom property editor later
		///</summary>
		[ImplementPropertyType("font")]
		public int Font
		{
			get { return this.GetPropertyValue<int>("font"); }
		}

		///<summary>
		/// Address
		///</summary>
		[ImplementPropertyType("footerAddress")]
		public string FooterAddress
		{
			get { return this.GetPropertyValue<string>("footerAddress"); }
		}

		///<summary>
		/// Call To Action Caption: Caption on the Call To Action Button
		///</summary>
		[ImplementPropertyType("footerCTACaption")]
		public string FooterCtacaption
		{
			get { return this.GetPropertyValue<string>("footerCTACaption"); }
		}

		///<summary>
		/// Call To Action Link
		///</summary>
		[ImplementPropertyType("FooterCtalink")]
		public IPublishedContent FooterCtalink
		{
			get { return this.GetPropertyValue<IPublishedContent>("FooterCtalink"); }
		}

		///<summary>
		/// Description
		///</summary>
		[ImplementPropertyType("footerDescription")]
		public string FooterDescription
		{
			get { return this.GetPropertyValue<string>("footerDescription"); }
		}

		///<summary>
		/// Header
		///</summary>
		[ImplementPropertyType("footerHeader")]
		public string FooterHeader
		{
			get { return this.GetPropertyValue<string>("footerHeader"); }
		}

		///<summary>
		/// Hero Background: Spice up the homepage by adding a beautiful photo that relates to your business
		///</summary>
		[ImplementPropertyType("HeroBackgroundImage")]
		public IPublishedContent HeroBackgroundImage
		{
			get { return this.GetPropertyValue<IPublishedContent>("HeroBackgroundImage"); }
		}

		///<summary>
		/// Call To Action Caption: The caption on the button
		///</summary>
		[ImplementPropertyType("heroCTACaption")]
		public string HeroCtacaption
		{
			get { return this.GetPropertyValue<string>("heroCTACaption"); }
		}

		///<summary>
		/// Call To Action Link
		///</summary>
		[ImplementPropertyType("HeroCtalink")]
		public IPublishedContent HeroCtalink
		{
			get { return this.GetPropertyValue<IPublishedContent>("HeroCtalink"); }
		}

		///<summary>
		/// Description
		///</summary>
		[ImplementPropertyType("heroDescription")]
		public string HeroDescription
		{
			get { return this.GetPropertyValue<string>("heroDescription"); }
		}

		///<summary>
		/// Header: This is the main headline for the hero area on the Homepage
		///</summary>
		[ImplementPropertyType("heroHeader")]
		public string HeroHeader
		{
			get { return this.GetPropertyValue<string>("heroHeader"); }
		}

		///<summary>
		/// Logo: Optional. If you add a logo it'll be used in the upper left corner instead of the site name. Make sure to use a transparent logo for best results
		///</summary>
		[ImplementPropertyType("SiteLogo")]
		public IPublishedContent SiteLogo
		{
			get { return this.GetPropertyValue<IPublishedContent>("SiteLogo"); }
		}

		///<summary>
		/// Sitename: Used on the homepage as well as the title and social cards
		///</summary>
		[ImplementPropertyType("sitename")]
		public string Sitename
		{
			get { return this.GetPropertyValue<string>("sitename"); }
		}

		///<summary>
		/// Metadata
		///</summary>
		[ImplementPropertyType("metadata")]
		public Epiphany.SeoMetadata.SeoMetadata Metadata
		{
			get { return Umbraco.Web.PublishedContentModels.SEO.GetMetadata(this); }
		}

		///<summary>
		/// Meta Tags
		///</summary>
		[ImplementPropertyType("metaTags")]
		public IEnumerable<string> MetaTags
		{
			get { return Umbraco.Web.PublishedContentModels.SEO.GetMetaTags(this); }
		}
	}

	// Mixin content Type 1094 with alias "navigationBase"
	/// <summary>Navigation Base</summary>
	public partial interface INavigationBase : IPublishedContent
	{
		/// <summary>Keywords</summary>
		IEnumerable<string> Keywords { get; }

		/// <summary>Description</summary>
		string SeoMetaDescription { get; }

		/// <summary>Hide in Navigation</summary>
		bool UmbracoNavihide { get; }
	}

	/// <summary>Navigation Base</summary>
	[PublishedContentModel("navigationBase")]
	public partial class NavigationBase : PublishedContentModel, INavigationBase
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "navigationBase";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public NavigationBase(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<NavigationBase, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Keywords: Keywords that describe the content of the page. This is consired optional since most modern search engines don't use this anymore
		///</summary>
		[ImplementPropertyType("keywords")]
		public IEnumerable<string> Keywords
		{
			get { return GetKeywords(this); }
		}

		/// <summary>Static getter for Keywords</summary>
		public static IEnumerable<string> GetKeywords(INavigationBase that) { return that.GetPropertyValue<IEnumerable<string>>("keywords"); }

		///<summary>
		/// Description: A brief description of the content on your page. This text is shown below the title in a google search result and also used for Social Sharing Cards. The ideal length is between 130 and 155 characters
		///</summary>
		[ImplementPropertyType("seoMetaDescription")]
		public string SeoMetaDescription
		{
			get { return GetSeoMetaDescription(this); }
		}

		/// <summary>Static getter for Description</summary>
		public static string GetSeoMetaDescription(INavigationBase that) { return that.GetPropertyValue<string>("seoMetaDescription"); }

		///<summary>
		/// Hide in Navigation: If you don't want this page to appear in the navigation, check this box
		///</summary>
		[ImplementPropertyType("umbracoNavihide")]
		public bool UmbracoNavihide
		{
			get { return GetUmbracoNavihide(this); }
		}

		/// <summary>Static getter for Hide in Navigation</summary>
		public static bool GetUmbracoNavihide(INavigationBase that) { return that.GetPropertyValue<bool>("umbracoNavihide"); }
	}

	/// <summary>Blog</summary>
	[PublishedContentModel("blog")]
	public partial class Blog : PublishedContentModel, IContentBase, INavigationBase
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "blog";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Blog(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Blog, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Disqus Shortname: To use comments, you'll need to sign up for Disqus and enter your shortname here (more info: https://help.disqus.com/customer/portal/articles/472097-universal-embed-code)
		///</summary>
		[ImplementPropertyType("disqusShortname")]
		public string DisqusShortname
		{
			get { return this.GetPropertyValue<string>("disqusShortname"); }
		}

		///<summary>
		/// How many posts should be shown?
		///</summary>
		[ImplementPropertyType("howManyPostsShouldBeShown")]
		public decimal HowManyPostsShouldBeShown
		{
			get { return this.GetPropertyValue<decimal>("howManyPostsShouldBeShown"); }
		}

		///<summary>
		/// Content
		///</summary>
		[ImplementPropertyType("bodyText")]
		public Newtonsoft.Json.Linq.JToken BodyText
		{
			get { return Umbraco.Web.PublishedContentModels.ContentBase.GetBodyText(this); }
		}

		///<summary>
		/// Page Title: The title of the page, this is also the first text in a google search result. The ideal length is between 40 and 60 characters
		///</summary>
		[ImplementPropertyType("pageTitle")]
		public string PageTitle
		{
			get { return Umbraco.Web.PublishedContentModels.ContentBase.GetPageTitle(this); }
		}

		///<summary>
		/// Keywords: Keywords that describe the content of the page. This is consired optional since most modern search engines don't use this anymore
		///</summary>
		[ImplementPropertyType("keywords")]
		public IEnumerable<string> Keywords
		{
			get { return Umbraco.Web.PublishedContentModels.NavigationBase.GetKeywords(this); }
		}

		///<summary>
		/// Description: A brief description of the content on your page. This text is shown below the title in a google search result and also used for Social Sharing Cards. The ideal length is between 130 and 155 characters
		///</summary>
		[ImplementPropertyType("seoMetaDescription")]
		public string SeoMetaDescription
		{
			get { return Umbraco.Web.PublishedContentModels.NavigationBase.GetSeoMetaDescription(this); }
		}

		///<summary>
		/// Hide in Navigation: If you don't want this page to appear in the navigation, check this box
		///</summary>
		[ImplementPropertyType("umbracoNavihide")]
		public bool UmbracoNavihide
		{
			get { return Umbraco.Web.PublishedContentModels.NavigationBase.GetUmbracoNavihide(this); }
		}
	}

	/// <summary>Blogpost</summary>
	[PublishedContentModel("blogpost")]
	public partial class Blogpost : PublishedContentModel, IFeature, INavigationBase
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "blogpost";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Blogpost(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Blogpost, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Content
		///</summary>
		[ImplementPropertyType("bodyText")]
		public Newtonsoft.Json.Linq.JToken BodyText
		{
			get { return this.GetPropertyValue<Newtonsoft.Json.Linq.JToken>("bodyText"); }
		}

		///<summary>
		/// Categories (tags)
		///</summary>
		[ImplementPropertyType("categories")]
		public IEnumerable<string> Categories
		{
			get { return this.GetPropertyValue<IEnumerable<string>>("categories"); }
		}

		///<summary>
		/// Excerpt: Introduction to your blog post. This is also used in the summaries on the front of the blog as well as the homepage
		///</summary>
		[ImplementPropertyType("excerpt")]
		public string Excerpt
		{
			get { return this.GetPropertyValue<string>("excerpt"); }
		}

		///<summary>
		/// Page Title: The title of the page, this is also the first text in a google search result. The ideal length is between 40 and 60 characters
		///</summary>
		[ImplementPropertyType("pageTitle")]
		public string PageTitle
		{
			get { return this.GetPropertyValue<string>("pageTitle"); }
		}

		///<summary>
		/// Details
		///</summary>
		[ImplementPropertyType("featureDetails")]
		public string FeatureDetails
		{
			get { return Umbraco.Web.PublishedContentModels.Feature.GetFeatureDetails(this); }
		}

		///<summary>
		/// Name
		///</summary>
		[ImplementPropertyType("featureName")]
		public string FeatureName
		{
			get { return Umbraco.Web.PublishedContentModels.Feature.GetFeatureName(this); }
		}

		///<summary>
		/// Keywords: Keywords that describe the content of the page. This is consired optional since most modern search engines don't use this anymore
		///</summary>
		[ImplementPropertyType("keywords")]
		public IEnumerable<string> Keywords
		{
			get { return Umbraco.Web.PublishedContentModels.NavigationBase.GetKeywords(this); }
		}

		///<summary>
		/// Description: A brief description of the content on your page. This text is shown below the title in a google search result and also used for Social Sharing Cards. The ideal length is between 130 and 155 characters
		///</summary>
		[ImplementPropertyType("seoMetaDescription")]
		public string SeoMetaDescription
		{
			get { return Umbraco.Web.PublishedContentModels.NavigationBase.GetSeoMetaDescription(this); }
		}

		///<summary>
		/// Hide in Navigation: If you don't want this page to appear in the navigation, check this box
		///</summary>
		[ImplementPropertyType("umbracoNavihide")]
		public bool UmbracoNavihide
		{
			get { return Umbraco.Web.PublishedContentModels.NavigationBase.GetUmbracoNavihide(this); }
		}
	}

	/// <summary>Contact</summary>
	[PublishedContentModel("contact")]
	public partial class Contact : PublishedContentModel, INavigationBase, ISEO
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "contact";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Contact(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Contact, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// ApiKey: To use the map you'll need your own Google API key. More information here: https://developers.google.com/maps/documentation/javascript/error-messages#no-api-keys
		///</summary>
		[ImplementPropertyType("apiKey")]
		public string ApiKey
		{
			get { return this.GetPropertyValue<string>("apiKey"); }
		}

		///<summary>
		/// Pick a Contact Form: If Umbraco Forms is installed you'll be able to select a form here.
		///</summary>
		[ImplementPropertyType("contactForm")]
		public string ContactForm
		{
			get { return this.GetPropertyValue<string>("contactForm"); }
		}

		///<summary>
		/// Contact Form Header
		///</summary>
		[ImplementPropertyType("contactFormHeader")]
		public string ContactFormHeader
		{
			get { return this.GetPropertyValue<string>("contactFormHeader"); }
		}

		///<summary>
		/// Contact Intro
		///</summary>
		[ImplementPropertyType("contactIntro")]
		public IHtmlString ContactIntro
		{
			get { return this.GetPropertyValue<IHtmlString>("contactIntro"); }
		}

		///<summary>
		/// Editor_Picture
		///</summary>
		[ImplementPropertyType("editorPicture")]
		public IPublishedContent EditorPicture
		{
			get { return this.GetPropertyValue<IPublishedContent>("editorPicture"); }
		}

		///<summary>
		/// Your Address: Plot your address on the map and it'll be displayed on the contact page
		///</summary>
		[ImplementPropertyType("map")]
		public Terratype.Models.Model Map
		{
			get { return this.GetPropertyValue<Terratype.Models.Model>("map"); }
		}

		///<summary>
		/// Map Header
		///</summary>
		[ImplementPropertyType("mapHeader")]
		public string MapHeader
		{
			get { return this.GetPropertyValue<string>("mapHeader"); }
		}

		///<summary>
		/// Page Title: The title of the page, this is also the first text in a google search result. The ideal length is between 40 and 60 characters
		///</summary>
		[ImplementPropertyType("pageTitle")]
		public string PageTitle
		{
			get { return this.GetPropertyValue<string>("pageTitle"); }
		}

		///<summary>
		/// Keywords: Keywords that describe the content of the page. This is consired optional since most modern search engines don't use this anymore
		///</summary>
		[ImplementPropertyType("keywords")]
		public IEnumerable<string> Keywords
		{
			get { return Umbraco.Web.PublishedContentModels.NavigationBase.GetKeywords(this); }
		}

		///<summary>
		/// Description: A brief description of the content on your page. This text is shown below the title in a google search result and also used for Social Sharing Cards. The ideal length is between 130 and 155 characters
		///</summary>
		[ImplementPropertyType("seoMetaDescription")]
		public string SeoMetaDescription
		{
			get { return Umbraco.Web.PublishedContentModels.NavigationBase.GetSeoMetaDescription(this); }
		}

		///<summary>
		/// Hide in Navigation: If you don't want this page to appear in the navigation, check this box
		///</summary>
		[ImplementPropertyType("umbracoNavihide")]
		public bool UmbracoNavihide
		{
			get { return Umbraco.Web.PublishedContentModels.NavigationBase.GetUmbracoNavihide(this); }
		}

		///<summary>
		/// Metadata
		///</summary>
		[ImplementPropertyType("metadata")]
		public Epiphany.SeoMetadata.SeoMetadata Metadata
		{
			get { return Umbraco.Web.PublishedContentModels.SEO.GetMetadata(this); }
		}

		///<summary>
		/// Meta Tags
		///</summary>
		[ImplementPropertyType("metaTags")]
		public IEnumerable<string> MetaTags
		{
			get { return Umbraco.Web.PublishedContentModels.SEO.GetMetaTags(this); }
		}
	}

	/// <summary>Content Page</summary>
	[PublishedContentModel("contentPage")]
	public partial class ContentPage : PublishedContentModel, IContentBase, INavigationBase
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "contentPage";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public ContentPage(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<ContentPage, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Content
		///</summary>
		[ImplementPropertyType("bodyText")]
		public Newtonsoft.Json.Linq.JToken BodyText
		{
			get { return Umbraco.Web.PublishedContentModels.ContentBase.GetBodyText(this); }
		}

		///<summary>
		/// Page Title: The title of the page, this is also the first text in a google search result. The ideal length is between 40 and 60 characters
		///</summary>
		[ImplementPropertyType("pageTitle")]
		public string PageTitle
		{
			get { return Umbraco.Web.PublishedContentModels.ContentBase.GetPageTitle(this); }
		}

		///<summary>
		/// Keywords: Keywords that describe the content of the page. This is consired optional since most modern search engines don't use this anymore
		///</summary>
		[ImplementPropertyType("keywords")]
		public IEnumerable<string> Keywords
		{
			get { return Umbraco.Web.PublishedContentModels.NavigationBase.GetKeywords(this); }
		}

		///<summary>
		/// Description: A brief description of the content on your page. This text is shown below the title in a google search result and also used for Social Sharing Cards. The ideal length is between 130 and 155 characters
		///</summary>
		[ImplementPropertyType("seoMetaDescription")]
		public string SeoMetaDescription
		{
			get { return Umbraco.Web.PublishedContentModels.NavigationBase.GetSeoMetaDescription(this); }
		}

		///<summary>
		/// Hide in Navigation: If you don't want this page to appear in the navigation, check this box
		///</summary>
		[ImplementPropertyType("umbracoNavihide")]
		public bool UmbracoNavihide
		{
			get { return Umbraco.Web.PublishedContentModels.NavigationBase.GetUmbracoNavihide(this); }
		}
	}

	/// <summary>People</summary>
	[PublishedContentModel("people")]
	public partial class People : PublishedContentModel, IContentBase, INavigationBase
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "people";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public People(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<People, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Featured People
		///</summary>
		[ImplementPropertyType("featuredPeople")]
		public IEnumerable<IPublishedContent> FeaturedPeople
		{
			get { return this.GetPropertyValue<IEnumerable<IPublishedContent>>("featuredPeople"); }
		}

		///<summary>
		/// Content
		///</summary>
		[ImplementPropertyType("bodyText")]
		public Newtonsoft.Json.Linq.JToken BodyText
		{
			get { return Umbraco.Web.PublishedContentModels.ContentBase.GetBodyText(this); }
		}

		///<summary>
		/// Page Title: The title of the page, this is also the first text in a google search result. The ideal length is between 40 and 60 characters
		///</summary>
		[ImplementPropertyType("pageTitle")]
		public string PageTitle
		{
			get { return Umbraco.Web.PublishedContentModels.ContentBase.GetPageTitle(this); }
		}

		///<summary>
		/// Keywords: Keywords that describe the content of the page. This is consired optional since most modern search engines don't use this anymore
		///</summary>
		[ImplementPropertyType("keywords")]
		public IEnumerable<string> Keywords
		{
			get { return Umbraco.Web.PublishedContentModels.NavigationBase.GetKeywords(this); }
		}

		///<summary>
		/// Description: A brief description of the content on your page. This text is shown below the title in a google search result and also used for Social Sharing Cards. The ideal length is between 130 and 155 characters
		///</summary>
		[ImplementPropertyType("seoMetaDescription")]
		public string SeoMetaDescription
		{
			get { return Umbraco.Web.PublishedContentModels.NavigationBase.GetSeoMetaDescription(this); }
		}

		///<summary>
		/// Hide in Navigation: If you don't want this page to appear in the navigation, check this box
		///</summary>
		[ImplementPropertyType("umbracoNavihide")]
		public bool UmbracoNavihide
		{
			get { return Umbraco.Web.PublishedContentModels.NavigationBase.GetUmbracoNavihide(this); }
		}
	}

	/// <summary>Person</summary>
	[PublishedContentModel("person")]
	public partial class Person : PublishedContentModel, INavigationBase
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "person";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Person(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Person, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Department
		///</summary>
		[ImplementPropertyType("department")]
		public IEnumerable<string> Department
		{
			get { return this.GetPropertyValue<IEnumerable<string>>("department"); }
		}

		///<summary>
		/// Email
		///</summary>
		[ImplementPropertyType("email")]
		public string Email
		{
			get { return this.GetPropertyValue<string>("email"); }
		}

		///<summary>
		/// Facebook username
		///</summary>
		[ImplementPropertyType("facebookUsername")]
		public string FacebookUsername
		{
			get { return this.GetPropertyValue<string>("facebookUsername"); }
		}

		///<summary>
		/// Instagram Username
		///</summary>
		[ImplementPropertyType("instagramUsername")]
		public string InstagramUsername
		{
			get { return this.GetPropertyValue<string>("instagramUsername"); }
		}

		///<summary>
		/// LinkedIn username
		///</summary>
		[ImplementPropertyType("linkedInUsername")]
		public string LinkedInUsername
		{
			get { return this.GetPropertyValue<string>("linkedInUsername"); }
		}

		///<summary>
		/// Photo
		///</summary>
		[ImplementPropertyType("photo")]
		public IPublishedContent Photo
		{
			get { return this.GetPropertyValue<IPublishedContent>("photo"); }
		}

		///<summary>
		/// Twitter username
		///</summary>
		[ImplementPropertyType("twitterUsername")]
		public string TwitterUsername
		{
			get { return this.GetPropertyValue<string>("twitterUsername"); }
		}

		///<summary>
		/// Keywords: Keywords that describe the content of the page. This is consired optional since most modern search engines don't use this anymore
		///</summary>
		[ImplementPropertyType("keywords")]
		public IEnumerable<string> Keywords
		{
			get { return Umbraco.Web.PublishedContentModels.NavigationBase.GetKeywords(this); }
		}

		///<summary>
		/// Description: A brief description of the content on your page. This text is shown below the title in a google search result and also used for Social Sharing Cards. The ideal length is between 130 and 155 characters
		///</summary>
		[ImplementPropertyType("seoMetaDescription")]
		public string SeoMetaDescription
		{
			get { return Umbraco.Web.PublishedContentModels.NavigationBase.GetSeoMetaDescription(this); }
		}

		///<summary>
		/// Hide in Navigation: If you don't want this page to appear in the navigation, check this box
		///</summary>
		[ImplementPropertyType("umbracoNavihide")]
		public bool UmbracoNavihide
		{
			get { return Umbraco.Web.PublishedContentModels.NavigationBase.GetUmbracoNavihide(this); }
		}
	}

	/// <summary>Product</summary>
	[PublishedContentModel("product")]
	public partial class Product : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "product";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Product(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Product, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Content
		///</summary>
		[ImplementPropertyType("bodyText")]
		public Newtonsoft.Json.Linq.JToken BodyText
		{
			get { return this.GetPropertyValue<Newtonsoft.Json.Linq.JToken>("bodyText"); }
		}

		///<summary>
		/// Category
		///</summary>
		[ImplementPropertyType("category")]
		public IEnumerable<string> Category
		{
			get { return this.GetPropertyValue<IEnumerable<string>>("category"); }
		}

		///<summary>
		/// Description
		///</summary>
		[ImplementPropertyType("description")]
		public string Description
		{
			get { return this.GetPropertyValue<string>("description"); }
		}

		///<summary>
		/// Features
		///</summary>
		[ImplementPropertyType("features")]
		public object Features
		{
			get { return this.GetPropertyValue("features"); }
		}

		///<summary>
		/// Photos: You can add multiple photos - the first one will be the default and used in overviews and lists
		///</summary>
		[ImplementPropertyType("photos")]
		public IEnumerable<IPublishedContent> Photos
		{
			get { return this.GetPropertyValue<IEnumerable<IPublishedContent>>("photos"); }
		}

		///<summary>
		/// Price
		///</summary>
		[ImplementPropertyType("price")]
		public decimal Price
		{
			get { return this.GetPropertyValue<decimal>("price"); }
		}

		///<summary>
		/// Product Name
		///</summary>
		[ImplementPropertyType("productName")]
		public string ProductName
		{
			get { return this.GetPropertyValue<string>("productName"); }
		}

		///<summary>
		/// SKU
		///</summary>
		[ImplementPropertyType("sku")]
		public string Sku
		{
			get { return this.GetPropertyValue<string>("sku"); }
		}
	}

	/// <summary>Products</summary>
	[PublishedContentModel("products")]
	public partial class Products : PublishedContentModel, IContentBase, INavigationBase
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "products";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Products(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Products, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Default Currency: This is just used to prefix pricing
		///</summary>
		[ImplementPropertyType("defaultCurrency")]
		public string DefaultCurrency
		{
			get { return this.GetPropertyValue<string>("defaultCurrency"); }
		}

		///<summary>
		/// Featured Products
		///</summary>
		[ImplementPropertyType("featuredProducts")]
		public IEnumerable<IPublishedContent> FeaturedProducts
		{
			get { return this.GetPropertyValue<IEnumerable<IPublishedContent>>("featuredProducts"); }
		}

		///<summary>
		/// Content
		///</summary>
		[ImplementPropertyType("bodyText")]
		public Newtonsoft.Json.Linq.JToken BodyText
		{
			get { return Umbraco.Web.PublishedContentModels.ContentBase.GetBodyText(this); }
		}

		///<summary>
		/// Page Title: The title of the page, this is also the first text in a google search result. The ideal length is between 40 and 60 characters
		///</summary>
		[ImplementPropertyType("pageTitle")]
		public string PageTitle
		{
			get { return Umbraco.Web.PublishedContentModels.ContentBase.GetPageTitle(this); }
		}

		///<summary>
		/// Keywords: Keywords that describe the content of the page. This is consired optional since most modern search engines don't use this anymore
		///</summary>
		[ImplementPropertyType("keywords")]
		public IEnumerable<string> Keywords
		{
			get { return Umbraco.Web.PublishedContentModels.NavigationBase.GetKeywords(this); }
		}

		///<summary>
		/// Description: A brief description of the content on your page. This text is shown below the title in a google search result and also used for Social Sharing Cards. The ideal length is between 130 and 155 characters
		///</summary>
		[ImplementPropertyType("seoMetaDescription")]
		public string SeoMetaDescription
		{
			get { return Umbraco.Web.PublishedContentModels.NavigationBase.GetSeoMetaDescription(this); }
		}

		///<summary>
		/// Hide in Navigation: If you don't want this page to appear in the navigation, check this box
		///</summary>
		[ImplementPropertyType("umbracoNavihide")]
		public bool UmbracoNavihide
		{
			get { return Umbraco.Web.PublishedContentModels.NavigationBase.GetUmbracoNavihide(this); }
		}
	}

	// Mixin content Type 1147 with alias "sEO"
	/// <summary>SEO</summary>
	public partial interface ISEO : IPublishedContent
	{
		/// <summary>Metadata</summary>
		Epiphany.SeoMetadata.SeoMetadata Metadata { get; }

		/// <summary>Meta Tags</summary>
		IEnumerable<string> MetaTags { get; }
	}

	/// <summary>SEO</summary>
	[PublishedContentModel("sEO")]
	public partial class SEO : PublishedContentModel, ISEO
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "sEO";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public SEO(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SEO, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Metadata
		///</summary>
		[ImplementPropertyType("metadata")]
		public Epiphany.SeoMetadata.SeoMetadata Metadata
		{
			get { return GetMetadata(this); }
		}

		/// <summary>Static getter for Metadata</summary>
		public static Epiphany.SeoMetadata.SeoMetadata GetMetadata(ISEO that) { return that.GetPropertyValue<Epiphany.SeoMetadata.SeoMetadata>("metadata"); }

		///<summary>
		/// Meta Tags
		///</summary>
		[ImplementPropertyType("metaTags")]
		public IEnumerable<string> MetaTags
		{
			get { return GetMetaTags(this); }
		}

		/// <summary>Static getter for Meta Tags</summary>
		public static IEnumerable<string> GetMetaTags(ISEO that) { return that.GetPropertyValue<IEnumerable<string>>("metaTags"); }
	}

	/// <summary>LandingPage</summary>
	[PublishedContentModel("landingPage")]
	public partial class LandingPage : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "landingPage";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public LandingPage(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<LandingPage, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// page-title
		///</summary>
		[ImplementPropertyType("pageTitle")]
		public string PageTitle
		{
			get { return this.GetPropertyValue<string>("pageTitle"); }
		}

		///<summary>
		/// page-title-subtitle
		///</summary>
		[ImplementPropertyType("pageTitleSubtitle")]
		public string PageTitleSubtitle
		{
			get { return this.GetPropertyValue<string>("pageTitleSubtitle"); }
		}
	}

	/// <summary>Recipe</summary>
	[PublishedContentModel("recipe")]
	public partial class Recipe : PublishedContentModel, ISEO
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "recipe";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Recipe(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Recipe, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Calories
		///</summary>
		[ImplementPropertyType("calories")]
		public int Calories
		{
			get { return this.GetPropertyValue<int>("calories"); }
		}

		///<summary>
		/// Cooking Time Hour
		///</summary>
		[ImplementPropertyType("cookingTimeHour")]
		public int CookingTimeHour
		{
			get { return this.GetPropertyValue<int>("cookingTimeHour"); }
		}

		///<summary>
		/// Cooking Time Minutes
		///</summary>
		[ImplementPropertyType("cookingTimeMinutes")]
		public int CookingTimeMinutes
		{
			get { return this.GetPropertyValue<int>("cookingTimeMinutes"); }
		}

		///<summary>
		/// Equipment Needed
		///</summary>
		[ImplementPropertyType("equipmentNeeded")]
		public IHtmlString EquipmentNeeded
		{
			get { return this.GetPropertyValue<IHtmlString>("equipmentNeeded"); }
		}

		///<summary>
		/// Header
		///</summary>
		[ImplementPropertyType("header")]
		public string Header
		{
			get { return this.GetPropertyValue<string>("header"); }
		}

		///<summary>
		/// Header_Description
		///</summary>
		[ImplementPropertyType("headerDescription")]
		public string HeaderDescription
		{
			get { return this.GetPropertyValue<string>("headerDescription"); }
		}

		///<summary>
		/// Ingredients
		///</summary>
		[ImplementPropertyType("ingredients")]
		public IHtmlString Ingredients
		{
			get { return this.GetPropertyValue<IHtmlString>("ingredients"); }
		}

		///<summary>
		/// Instructions
		///</summary>
		[ImplementPropertyType("instructions")]
		public IHtmlString Instructions
		{
			get { return this.GetPropertyValue<IHtmlString>("instructions"); }
		}

		///<summary>
		/// Recipe Image
		///</summary>
		[ImplementPropertyType("recipeImage")]
		public IPublishedContent RecipeImage
		{
			get { return this.GetPropertyValue<IPublishedContent>("recipeImage"); }
		}

		///<summary>
		/// Try recipes
		///</summary>
		[ImplementPropertyType("tryRecipes")]
		public IEnumerable<IPublishedContent> TryRecipes
		{
			get { return this.GetPropertyValue<IEnumerable<IPublishedContent>>("tryRecipes"); }
		}

		///<summary>
		/// Youtube Video Link
		///</summary>
		[ImplementPropertyType("youtubeVideoLink")]
		public object YoutubeVideoLink
		{
			get { return this.GetPropertyValue("youtubeVideoLink"); }
		}

		///<summary>
		/// Metadata
		///</summary>
		[ImplementPropertyType("metadata")]
		public Epiphany.SeoMetadata.SeoMetadata Metadata
		{
			get { return Umbraco.Web.PublishedContentModels.SEO.GetMetadata(this); }
		}

		///<summary>
		/// Meta Tags
		///</summary>
		[ImplementPropertyType("metaTags")]
		public IEnumerable<string> MetaTags
		{
			get { return Umbraco.Web.PublishedContentModels.SEO.GetMetaTags(this); }
		}
	}

	/// <summary>Recipes</summary>
	[PublishedContentModel("recipes")]
	public partial class Recipes : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "recipes";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Recipes(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Recipes, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// FeaturedRecipes
		///</summary>
		[ImplementPropertyType("featuredRecipes")]
		public IEnumerable<IPublishedContent> FeaturedRecipes
		{
			get { return this.GetPropertyValue<IEnumerable<IPublishedContent>>("featuredRecipes"); }
		}
	}

	/// <summary>Categories</summary>
	[PublishedContentModel("categories")]
	public partial class Categories : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "categories";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Categories(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Categories, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}
	}

	/// <summary>Category</summary>
	[PublishedContentModel("breakfast")]
	public partial class Breakfast : Categories, ICategoryComposite, ISEO
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "breakfast";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Breakfast(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Breakfast, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Category Main Image
		///</summary>
		[ImplementPropertyType("categoryMainImage")]
		public IPublishedContent CategoryMainImage
		{
			get { return this.GetPropertyValue<IPublishedContent>("categoryMainImage"); }
		}

		///<summary>
		/// Category Description
		///</summary>
		[ImplementPropertyType("categoryDescription")]
		public string CategoryDescription
		{
			get { return Umbraco.Web.PublishedContentModels.CategoryComposite.GetCategoryDescription(this); }
		}

		///<summary>
		/// Category Image
		///</summary>
		[ImplementPropertyType("categoryImage")]
		public IPublishedContent CategoryImage
		{
			get { return Umbraco.Web.PublishedContentModels.CategoryComposite.GetCategoryImage(this); }
		}

		///<summary>
		/// Category Name
		///</summary>
		[ImplementPropertyType("categoryName")]
		public string CategoryName
		{
			get { return Umbraco.Web.PublishedContentModels.CategoryComposite.GetCategoryName(this); }
		}

		///<summary>
		/// Metadata
		///</summary>
		[ImplementPropertyType("metadata")]
		public Epiphany.SeoMetadata.SeoMetadata Metadata
		{
			get { return Umbraco.Web.PublishedContentModels.SEO.GetMetadata(this); }
		}

		///<summary>
		/// Meta Tags
		///</summary>
		[ImplementPropertyType("metaTags")]
		public IEnumerable<string> MetaTags
		{
			get { return Umbraco.Web.PublishedContentModels.SEO.GetMetaTags(this); }
		}
	}

	// Mixin content Type 1183 with alias "categoryComposite"
	/// <summary>Category Composite</summary>
	public partial interface ICategoryComposite : IPublishedContent
	{
		/// <summary>Category Description</summary>
		string CategoryDescription { get; }

		/// <summary>Category Image</summary>
		IPublishedContent CategoryImage { get; }

		/// <summary>Category Name</summary>
		string CategoryName { get; }
	}

	/// <summary>Category Composite</summary>
	[PublishedContentModel("categoryComposite")]
	public partial class CategoryComposite : PublishedContentModel, ICategoryComposite
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "categoryComposite";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public CategoryComposite(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<CategoryComposite, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Category Description
		///</summary>
		[ImplementPropertyType("categoryDescription")]
		public string CategoryDescription
		{
			get { return GetCategoryDescription(this); }
		}

		/// <summary>Static getter for Category Description</summary>
		public static string GetCategoryDescription(ICategoryComposite that) { return that.GetPropertyValue<string>("categoryDescription"); }

		///<summary>
		/// Category Image
		///</summary>
		[ImplementPropertyType("categoryImage")]
		public IPublishedContent CategoryImage
		{
			get { return GetCategoryImage(this); }
		}

		/// <summary>Static getter for Category Image</summary>
		public static IPublishedContent GetCategoryImage(ICategoryComposite that) { return that.GetPropertyValue<IPublishedContent>("categoryImage"); }

		///<summary>
		/// Category Name
		///</summary>
		[ImplementPropertyType("categoryName")]
		public string CategoryName
		{
			get { return GetCategoryName(this); }
		}

		/// <summary>Static getter for Category Name</summary>
		public static string GetCategoryName(ICategoryComposite that) { return that.GetPropertyValue<string>("categoryName"); }
	}

	/// <summary>Favorite Recipes</summary>
	[PublishedContentModel("favoriteRecipes")]
	public partial class FavoriteRecipes : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "favoriteRecipes";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public FavoriteRecipes(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<FavoriteRecipes, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Favorite Recipe List
		///</summary>
		[ImplementPropertyType("featuredRecipeList")]
		public IEnumerable<IPublishedContent> FeaturedRecipeList
		{
			get { return this.GetPropertyValue<IEnumerable<IPublishedContent>>("featuredRecipeList"); }
		}

		///<summary>
		/// Home Page Featured Recipes
		///</summary>
		[ImplementPropertyType("homePageFeaturedRecipes")]
		public IEnumerable<IPublishedContent> HomePageFeaturedRecipes
		{
			get { return this.GetPropertyValue<IEnumerable<IPublishedContent>>("homePageFeaturedRecipes"); }
		}

		///<summary>
		/// Popular Categories
		///</summary>
		[ImplementPropertyType("popularCategories")]
		public IEnumerable<IPublishedContent> PopularCategories
		{
			get { return this.GetPropertyValue<IEnumerable<IPublishedContent>>("popularCategories"); }
		}
	}

	/// <summary>Promotions</summary>
	[PublishedContentModel("promotions")]
	public partial class Promotions : PublishedContentModel, ISEO
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "promotions";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Promotions(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Promotions, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Metadata
		///</summary>
		[ImplementPropertyType("metadata")]
		public Epiphany.SeoMetadata.SeoMetadata Metadata
		{
			get { return Umbraco.Web.PublishedContentModels.SEO.GetMetadata(this); }
		}

		///<summary>
		/// Meta Tags
		///</summary>
		[ImplementPropertyType("metaTags")]
		public IEnumerable<string> MetaTags
		{
			get { return Umbraco.Web.PublishedContentModels.SEO.GetMetaTags(this); }
		}
	}

	/// <summary>RankOne</summary>
	[PublishedContentModel("rankOne")]
	public partial class RankOne : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "rankOne";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public RankOne(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<RankOne, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// RankOne Dashboard
		///</summary>
		[ImplementPropertyType("rankOneDashboard")]
		public object RankOneDashboard
		{
			get { return this.GetPropertyValue("rankOneDashboard"); }
		}

		///<summary>
		/// RankOne Result View
		///</summary>
		[ImplementPropertyType("rankOneResultView")]
		public object RankOneResultView
		{
			get { return this.GetPropertyValue("rankOneResultView"); }
		}

		///<summary>
		/// RankOne Summary
		///</summary>
		[ImplementPropertyType("rankOneSummary")]
		public object RankOneSummary
		{
			get { return this.GetPropertyValue("rankOneSummary"); }
		}
	}

	/// <summary>Search</summary>
	[PublishedContentModel("search")]
	public partial class Search : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "search";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Search(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Search, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}
	}

	/// <summary>Folder</summary>
	[PublishedContentModel("Folder")]
	public partial class Folder : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "Folder";
		public new const PublishedItemType ModelItemType = PublishedItemType.Media;
#pragma warning restore 0109

		public Folder(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Folder, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Contents:
		///</summary>
		[ImplementPropertyType("contents")]
		public object Contents
		{
			get { return this.GetPropertyValue("contents"); }
		}
	}

	/// <summary>Image</summary>
	[PublishedContentModel("Image")]
	public partial class Image : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "Image";
		public new const PublishedItemType ModelItemType = PublishedItemType.Media;
#pragma warning restore 0109

		public Image(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Image, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Size
		///</summary>
		[ImplementPropertyType("umbracoBytes")]
		public string UmbracoBytes
		{
			get { return this.GetPropertyValue<string>("umbracoBytes"); }
		}

		///<summary>
		/// Type
		///</summary>
		[ImplementPropertyType("umbracoExtension")]
		public string UmbracoExtension
		{
			get { return this.GetPropertyValue<string>("umbracoExtension"); }
		}

		///<summary>
		/// Upload image
		///</summary>
		[ImplementPropertyType("umbracoFile")]
		public Umbraco.Web.Models.ImageCropDataSet UmbracoFile
		{
			get { return this.GetPropertyValue<Umbraco.Web.Models.ImageCropDataSet>("umbracoFile"); }
		}

		///<summary>
		/// Height
		///</summary>
		[ImplementPropertyType("umbracoHeight")]
		public string UmbracoHeight
		{
			get { return this.GetPropertyValue<string>("umbracoHeight"); }
		}

		///<summary>
		/// Width
		///</summary>
		[ImplementPropertyType("umbracoWidth")]
		public string UmbracoWidth
		{
			get { return this.GetPropertyValue<string>("umbracoWidth"); }
		}
	}

	/// <summary>File</summary>
	[PublishedContentModel("File")]
	public partial class File : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "File";
		public new const PublishedItemType ModelItemType = PublishedItemType.Media;
#pragma warning restore 0109

		public File(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<File, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Size
		///</summary>
		[ImplementPropertyType("umbracoBytes")]
		public string UmbracoBytes
		{
			get { return this.GetPropertyValue<string>("umbracoBytes"); }
		}

		///<summary>
		/// Type
		///</summary>
		[ImplementPropertyType("umbracoExtension")]
		public string UmbracoExtension
		{
			get { return this.GetPropertyValue<string>("umbracoExtension"); }
		}

		///<summary>
		/// Upload file
		///</summary>
		[ImplementPropertyType("umbracoFile")]
		public string UmbracoFile
		{
			get { return this.GetPropertyValue<string>("umbracoFile"); }
		}
	}

	/// <summary>Member</summary>
	[PublishedContentModel("Member")]
	public partial class Member : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "Member";
		public new const PublishedItemType ModelItemType = PublishedItemType.Member;
#pragma warning restore 0109

		public Member(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Member, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Is Approved
		///</summary>
		[ImplementPropertyType("umbracoMemberApproved")]
		public bool UmbracoMemberApproved
		{
			get { return this.GetPropertyValue<bool>("umbracoMemberApproved"); }
		}

		///<summary>
		/// Comments
		///</summary>
		[ImplementPropertyType("umbracoMemberComments")]
		public string UmbracoMemberComments
		{
			get { return this.GetPropertyValue<string>("umbracoMemberComments"); }
		}

		///<summary>
		/// Failed Password Attempts
		///</summary>
		[ImplementPropertyType("umbracoMemberFailedPasswordAttempts")]
		public string UmbracoMemberFailedPasswordAttempts
		{
			get { return this.GetPropertyValue<string>("umbracoMemberFailedPasswordAttempts"); }
		}

		///<summary>
		/// Last Lockout Date
		///</summary>
		[ImplementPropertyType("umbracoMemberLastLockoutDate")]
		public string UmbracoMemberLastLockoutDate
		{
			get { return this.GetPropertyValue<string>("umbracoMemberLastLockoutDate"); }
		}

		///<summary>
		/// Last Login Date
		///</summary>
		[ImplementPropertyType("umbracoMemberLastLogin")]
		public string UmbracoMemberLastLogin
		{
			get { return this.GetPropertyValue<string>("umbracoMemberLastLogin"); }
		}

		///<summary>
		/// Last Password Change Date
		///</summary>
		[ImplementPropertyType("umbracoMemberLastPasswordChangeDate")]
		public string UmbracoMemberLastPasswordChangeDate
		{
			get { return this.GetPropertyValue<string>("umbracoMemberLastPasswordChangeDate"); }
		}

		///<summary>
		/// Is Locked Out
		///</summary>
		[ImplementPropertyType("umbracoMemberLockedOut")]
		public bool UmbracoMemberLockedOut
		{
			get { return this.GetPropertyValue<bool>("umbracoMemberLockedOut"); }
		}

		///<summary>
		/// Password Answer
		///</summary>
		[ImplementPropertyType("umbracoMemberPasswordRetrievalAnswer")]
		public string UmbracoMemberPasswordRetrievalAnswer
		{
			get { return this.GetPropertyValue<string>("umbracoMemberPasswordRetrievalAnswer"); }
		}

		///<summary>
		/// Password Question
		///</summary>
		[ImplementPropertyType("umbracoMemberPasswordRetrievalQuestion")]
		public string UmbracoMemberPasswordRetrievalQuestion
		{
			get { return this.GetPropertyValue<string>("umbracoMemberPasswordRetrievalQuestion"); }
		}
	}

}



// EOF
